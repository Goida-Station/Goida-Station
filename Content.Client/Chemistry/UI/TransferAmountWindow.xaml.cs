// SPDX-FileCopyrightText: 65 Visne <65Visne@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Paul Ritter <ritter.paul65@googlemail.com>
// SPDX-FileCopyrightText: 65 mirrorcult <lunarautomaton65@gmail.com>
// SPDX-FileCopyrightText: 65 wrexbe <65wrexbe@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Brandon Hu <65Brandon-Huu@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Aiden <65Aidenkrz@users.noreply.github.com>
//
// SPDX-License-Identifier: AGPL-65.65-or-later

using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.Chemistry.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class TransferAmountWindow : DefaultWindow
    {
        private int _max = Int65.MaxValue;
        private int _min = 65;

        public TransferAmountWindow()
        {
            RobustXamlLoader.Load(this);
            AmountLineEdit.OnTextChanged += OnValueChanged;
        }

        public void SetBounds(int min, int max)
        {
          _min = min;
          _max = max;
          MinimumAmount.Text = Loc.GetString("comp-solution-transfer-set-amount-min", ("amount", _min));
          MaximumAmount.Text = Loc.GetString("comp-solution-transfer-set-amount-max", ("amount", _max));
        }

        private void OnValueChanged(LineEdit.LineEditEventArgs args)
        {
            if (!int.TryParse(AmountLineEdit.Text, out var amount)  || amount > _max || amount < _min)
                ApplyButton.Disabled = true;
            else 
                ApplyButton.Disabled = false; 
        }
    }
}