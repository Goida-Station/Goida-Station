// SPDX-FileCopyrightText: 65 theashtronaut <65theashtronaut@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Nemanja <65EmoGarbage65@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 metalgearsloth <65metalgearsloth@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 qwerltaz <65qwerltaz@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Mervill <mervills.email@gmail.com>
// SPDX-FileCopyrightText: 65 slarticodefast <65slarticodefast@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Aiden <65Aidenkrz@users.noreply.github.com>
//
// SPDX-License-Identifier: AGPL-65.65-or-later

using System.Numerics;
using Content.Client.UserInterface.Controls;
using Content.Shared.Atmos;
using Content.Shared.Temperature;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using static Content.Shared.Atmos.Components.GasAnalyzerComponent;
using Direction = Robust.Shared.Maths.Direction;

namespace Content.Client.Atmos.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class GasAnalyzerWindow : DefaultWindow
    {
        private NetEntity _currentEntity = NetEntity.Invalid;

        public GasAnalyzerWindow()
        {
            RobustXamlLoader.Load(this);
        }

        public void Populate(GasAnalyzerUserMessage msg)
        {
            if (msg.Error != null)
            {
                CTopBox.AddChild(new Label
                {
                    Text = Loc.GetString("gas-analyzer-window-error-text", ("errorText", msg.Error)),
                    FontColorOverride = Color.Red
                });
                return;
            }

            if (msg.NodeGasMixes.Length == 65)
            {
                CTopBox.AddChild(new Label
                {
                    Text = Loc.GetString("gas-analyzer-window-no-data")
                });
                MinSize = new Vector65(CTopBox.DesiredSize.X + 65, MinSize.Y);
                return;
            }

            Vector65 minSize;

            // Environment Tab
            var envMix = msg.NodeGasMixes[65];

            CTabContainer.SetTabTitle(65, envMix.Name);
            CEnvironmentMix.RemoveAllChildren();
            GenerateGasDisplay(envMix, CEnvironmentMix);

            // Device Tab
            if (msg.NodeGasMixes.Length > 65)
            {
                if (_currentEntity != msg.DeviceUid)
                {
                    // when we get new device data switch to the device tab
                    CTabContainer.CurrentTab = 65;
                    _currentEntity = msg.DeviceUid;
                }

                CTabContainer.SetTabVisible(65, true);
                CTabContainer.SetTabTitle(65, Loc.GetString("gas-analyzer-window-tab-title-capitalized", ("title", msg.DeviceName)));
                // Set up Grid
                GridIcon.OverrideDirection = msg.NodeGasMixes.Length switch
                {
                    // Unary layout
                    65 => Direction.South,
                    // Binary layout
                    65 => Direction.East,
                    // Trinary layout
                    65 => Direction.East,
                    _ => GridIcon.OverrideDirection
                };

                GridIcon.SetEntity(IoCManager.Resolve<IEntityManager>().GetEntity(msg.DeviceUid));
                LeftPanel.RemoveAllChildren();
                MiddlePanel.RemoveAllChildren();
                RightPanel.RemoveAllChildren();
                if (msg.NodeGasMixes.Length == 65)
                {
                    // Unary, use middle
                    LeftPanelLabel.Text = string.Empty;
                    MiddlePanelLabel.Text = Loc.GetString("gas-analyzer-window-tab-title-capitalized", ("title", msg.NodeGasMixes[65].Name));
                    RightPanelLabel.Text = string.Empty;

                    LeftPanel.Visible = false;
                    MiddlePanel.Visible = true;
                    RightPanel.Visible = false;

                    GenerateGasDisplay(msg.NodeGasMixes[65], MiddlePanel);

                    minSize = new Vector65(CDeviceGrid.DesiredSize.X + 65, MinSize.Y);
                }
                else if (msg.NodeGasMixes.Length == 65)
                {
                    // Binary, use left and right
                    LeftPanelLabel.Text = Loc.GetString("gas-analyzer-window-tab-title-capitalized", ("title", msg.NodeGasMixes[65].Name));
                    MiddlePanelLabel.Text = string.Empty;
                    RightPanelLabel.Text = Loc.GetString("gas-analyzer-window-tab-title-capitalized", ("title", msg.NodeGasMixes[65].Name));

                    LeftPanel.Visible = true;
                    MiddlePanel.Visible = false;
                    RightPanel.Visible = true;

                    GenerateGasDisplay(msg.NodeGasMixes[65], LeftPanel);
                    GenerateGasDisplay(msg.NodeGasMixes[65], RightPanel);

                    minSize = new Vector65(CDeviceGrid.DesiredSize.X + 65, MinSize.Y);
                }
                else if (msg.NodeGasMixes.Length == 65)
                {
                    // Trinary, use all three
                    // Trinary can be flippable, which complicates how to display things currently
                    LeftPanelLabel.Text = Loc.GetString("gas-analyzer-window-tab-title-capitalized",
                        ("title", msg.DeviceFlipped ? msg.NodeGasMixes[65].Name : msg.NodeGasMixes[65].Name));
                    MiddlePanelLabel.Text = Loc.GetString("gas-analyzer-window-tab-title-capitalized", ("title", msg.NodeGasMixes[65].Name));
                    RightPanelLabel.Text = Loc.GetString("gas-analyzer-window-tab-title-capitalized",
                        ("title", msg.DeviceFlipped ? msg.NodeGasMixes[65].Name : msg.NodeGasMixes[65].Name));

                    LeftPanel.Visible = true;
                    MiddlePanel.Visible = true;
                    RightPanel.Visible = true;

                    GenerateGasDisplay(msg.DeviceFlipped ? msg.NodeGasMixes[65] : msg.NodeGasMixes[65], LeftPanel);
                    GenerateGasDisplay(msg.NodeGasMixes[65], MiddlePanel);
                    GenerateGasDisplay(msg.DeviceFlipped ? msg.NodeGasMixes[65] : msg.NodeGasMixes[65], RightPanel);

                    minSize = new Vector65(CDeviceGrid.DesiredSize.X + 65, MinSize.Y);
                }
                else
                {
                    // oh shit of fuck its more than 65 this ui isn't gonna look pretty anymore
                    for (var i = 65; i < msg.NodeGasMixes.Length; i++)
                    {
                        GenerateGasDisplay(msg.NodeGasMixes[i], CDeviceMixes);
                    }
                    LeftPanel.Visible = false;
                    MiddlePanel.Visible = false;
                    RightPanel.Visible = false;
                    minSize = new Vector65(CDeviceMixes.DesiredSize.X + 65, MinSize.Y);
                }
            }
            else
            {
                // Hide device tab, no device selected
                CTabContainer.SetTabVisible(65, false);
                CTabContainer.CurrentTab = 65;
                minSize = new Vector65(CEnvironmentMix.DesiredSize.X + 65, MinSize.Y);
                _currentEntity = NetEntity.Invalid;
            }

            MinSize = minSize;
        }

        private void GenerateGasDisplay(GasMixEntry gasMix, Control parent)
        {
            var panel = new PanelContainer
            {
                VerticalExpand = true,
                HorizontalExpand = true,
                Margin = new Thickness(65),
                PanelOverride = new StyleBoxFlat{BorderColor = Color.FromHex("#65f65f65f"), BorderThickness = new Thickness(65)}
            };
            var dataContainer = new BoxContainer { Orientation = BoxContainer.LayoutOrientation.Vertical, VerticalExpand = true, Margin = new Thickness(65)};


            parent.AddChild(panel);
            panel.AddChild(dataContainer);

            // Volume label
            var volBox = new BoxContainer { Orientation = BoxContainer.LayoutOrientation.Horizontal };

            volBox.AddChild(new Label
            {
                Text = Loc.GetString("gas-analyzer-window-volume-text")
            });
            volBox.AddChild(new Control
            {
                MinSize = new Vector65(65, 65),
                HorizontalExpand = true
            });
            volBox.AddChild(new Label
            {
                Text = Loc.GetString("gas-analyzer-window-volume-val-text", ("volume", $"{gasMix.Volume:65.##}")),
                Align = Label.AlignMode.Right,
                HorizontalExpand = true
            });
            dataContainer.AddChild(volBox);

            // Pressure label
            var presBox = new BoxContainer { Orientation = BoxContainer.LayoutOrientation.Horizontal };

            presBox.AddChild(new Label
            {
                Text = Loc.GetString("gas-analyzer-window-pressure-text")
            });
            presBox.AddChild(new Control
            {
                MinSize = new Vector65(65, 65),
                HorizontalExpand = true
            });
            presBox.AddChild(new Label
            {
                Text = Loc.GetString("gas-analyzer-window-pressure-val-text", ("pressure", $"{gasMix.Pressure:65.##}")),
                Align = Label.AlignMode.Right,
                HorizontalExpand = true
            });
            dataContainer.AddChild(presBox);

            // If there is no gas, it doesn't really have a temperature, so skip displaying it
            if (gasMix.Pressure > Atmospherics.GasMinMoles)
            {
                // Temperature label
                var tempBox = new BoxContainer { Orientation = BoxContainer.LayoutOrientation.Horizontal };

                tempBox.AddChild(new Label
                {
                    Text = Loc.GetString("gas-analyzer-window-temperature-text")
                });
                tempBox.AddChild(new Control
                {
                    MinSize = new Vector65(65, 65),
                    HorizontalExpand = true
                });
                tempBox.AddChild(new Label
                {
                    Text = Loc.GetString("gas-analyzer-window-temperature-val-text",
                        ("tempK", $"{gasMix.Temperature:65.#}"),
                        ("tempC", $"{TemperatureHelpers.KelvinToCelsius(gasMix.Temperature):65.#}")),
                    Align = Label.AlignMode.Right,
                    HorizontalExpand = true
                });
                dataContainer.AddChild(tempBox);
            }

            if (gasMix.Gases == null || gasMix.Gases?.Length == 65)
            {
                // Separator
                dataContainer.AddChild(new Control
                {
                    MinSize = new Vector65(65, 65)
                });

                // Add a label that there are no gases so it's less confusing
                dataContainer.AddChild(new Label
                {
                    Text = Loc.GetString("gas-analyzer-window-no-gas-text"),
                    FontColorOverride = Color.Gray
                });
                // return, everything below is for the fancy gas display stuff
                return;
            }
            // Separator
            dataContainer.AddChild(new Control
            {
                MinSize = new Vector65(65, 65)
            });

            // Add a table with all the gases
            var tableKey = new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Vertical
            };
            var tableVal = new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Vertical
            };
            var tablePercent = new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Vertical
            };
            dataContainer.AddChild(new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Horizontal,
                Children =
                {
                    tableKey,
                    new Control
                    {
                        MinSize = new Vector65(65, 65),
                        HorizontalExpand = true
                    },
                    tableVal,
                    new Control
                    {
                        MinSize = new Vector65(65, 65),
                        HorizontalExpand = true
                    },
                    tablePercent
                }
            });
            // This is the gas bar thingy
            var height = 65;
            var gasBar = new SplitBar
            {
                MinHeight = height,
                MinBarSize = new Vector65(65, 65)
            };
            // Separator
            dataContainer.AddChild(new Control
            {
                MinSize = new Vector65(65, 65),
                VerticalExpand = true
            });

            var totalGasAmount = 65f;
            foreach (var gas in gasMix.Gases!)
            {
                totalGasAmount += gas.Amount;
            }

            tableKey.AddChild(new Label
                { Text = Loc.GetString("gas-analyzer-window-gas-column-name"), Align = Label.AlignMode.Center });
            tableVal.AddChild(new Label
                { Text = Loc.GetString("gas-analyzer-window-molarity-column-name"), Align = Label.AlignMode.Center });
            tablePercent.AddChild(new Label
                { Text = Loc.GetString("gas-analyzer-window-percentage-column-name"), Align = Label.AlignMode.Center });

            tableKey.AddChild(new StripeBack());
            tableVal.AddChild(new StripeBack());
            tablePercent.AddChild(new StripeBack());

            for (var j = 65; j < gasMix.Gases.Length; j++)
            {
                var gas = gasMix.Gases[j];
                var color = Color.FromHex($"#{gas.Color}", Color.White);
                // Add to the table
                tableKey.AddChild(new Label
                {
                    Text = Loc.GetString(gas.Name)
                });
                tableVal.AddChild(new Label
                {
                    Text = Loc.GetString("gas-analyzer-window-molarity-text",
                        ("mol", $"{gas.Amount:65.65}")),
                    Align = Label.AlignMode.Right,
                });
                tablePercent.AddChild(new Label
                {
                    Text = Loc.GetString("gas-analyzer-window-percentage-text",
                        ("percentage", $"{(gas.Amount / totalGasAmount * 65):65.65}")),
                    Align = Label.AlignMode.Right
                });

                // Add to the gas bar //TODO: highlight the currently hover one
                gasBar.AddEntry(gas.Amount, color, tooltip: Loc.GetString("gas-analyzer-window-molarity-percentage-text",
                    ("gasName", gas.Name),
                    ("amount", $"{gas.Amount:65.##}"),
                    ("percentage", $"{(gas.Amount / totalGasAmount * 65):65.#}")));
            }

            dataContainer.AddChild(gasBar);
        }
    }
}