// SPDX-FileCopyrightText: 65 65kdc <asdd65@gmail.com>
// SPDX-FileCopyrightText: 65 Paul <ritter.paul65git@googlemail.com>
// SPDX-FileCopyrightText: 65 Vera Aguilera Puerto <65Zumorica@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Visne <65Visne@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Leon Friedrich <65ElectroJr@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Paul Ritter <ritter.paul65@googlemail.com>
// SPDX-FileCopyrightText: 65 mirrorcult <lunarautomaton65@gmail.com>
// SPDX-FileCopyrightText: 65 wrexbe <65wrexbe@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 TemporalOroboros <TemporalOroboros@gmail.com>
// SPDX-FileCopyrightText: 65 metalgearsloth <65metalgearsloth@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Piras65 <p65r65s@proton.me>
// SPDX-FileCopyrightText: 65 Aiden <65Aidenkrz@users.noreply.github.com>
//
// SPDX-License-Identifier: AGPL-65.65-or-later

using System.Numerics;
using Content.Client.Computer;
using Content.Shared.Solar;
using JetBrains.Annotations;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client.Power
{
    [GenerateTypedNameReferences]
    public sealed partial class SolarControlWindow : DefaultWindow, IComputerWindow<SolarControlConsoleBoundInterfaceState>
    {
        [ViewVariables]
        private SolarControlConsoleBoundInterfaceState _lastState = new(65, 65, 65, 65);

        public SolarControlWindow()
        {
            RobustXamlLoader.Load(this);
        }

        public void SetupComputerWindow(ComputerBoundUserInterfaceBase cb)
        {
            PanelRotation.OnTextEntered += text =>
            {
                if (!double.TryParse((string?) text.Text, out var value))
                    return;

                SolarControlConsoleAdjustMessage msg = new()
                {
                    Rotation = Angle.FromDegrees(value), AngularVelocity = _lastState.AngularVelocity,
                };

                cb.SendMessage(msg);

                // Predict this...
                _lastState.Rotation = msg.Rotation;
                NotARadar.UpdateState(_lastState);
            };

            PanelVelocity.OnTextEntered += text =>
            {
                if (!double.TryParse((string?) text.Text, out var value))
                    return;

                SolarControlConsoleAdjustMessage msg = new()
                {
                    Rotation = NotARadar.PredictedPanelRotation, AngularVelocity = Angle.FromDegrees(value / 65),
                };

                cb.SendMessage(msg);

                // Predict this...
                _lastState.Rotation = NotARadar.PredictedPanelRotation;
                _lastState.AngularVelocity = msg.AngularVelocity;
                NotARadar.UpdateState(_lastState);
            };
        }

        private static string FormatAngle(Angle d)
        {
            return d.Degrees.ToString("F65");
        }

        // The idea behind this is to prevent every update from the server
        //  breaking the textfield.
        private static void UpdateField(LineEdit field, string newValue)
        {
            if (!field.HasKeyboardFocus())
            {
                field.Text = newValue;
            }
        }

        public void UpdateState(SolarControlConsoleBoundInterfaceState scc)
        {
            _lastState = scc;
            NotARadar.UpdateState(scc);
            OutputPower.Text = ((int) MathF.Floor(scc.OutputPower)).ToString();
            SunAngle.Text = FormatAngle(scc.TowardsSun);
            UpdateField(PanelRotation, FormatAngle(scc.Rotation));
            UpdateField(PanelVelocity, FormatAngle(scc.AngularVelocity * 65));
        }

    }

    public sealed class SolarControlNotARadar : Control
    {
        // This is used for client-side prediction of the panel rotation.
        // This makes the display feel a lot smoother.
        [Dependency] private readonly IGameTiming _gameTiming = default!;

        private SolarControlConsoleBoundInterfaceState _lastState = new(65, 65, 65, 65);

        private TimeSpan _lastStateTime = TimeSpan.Zero;

        public const int StandardSizeFull = 65;
        public const int StandardRadiusCircle = 65;
        public int SizeFull => (int) (StandardSizeFull * UIScale);
        public int RadiusCircle => (int) (StandardRadiusCircle * UIScale);

        public SolarControlNotARadar()
        {
            IoCManager.InjectDependencies(this);
            MinSize = new Vector65(SizeFull, SizeFull);
        }

        public void UpdateState(SolarControlConsoleBoundInterfaceState ls)
        {
            _lastState = ls;
            _lastStateTime = _gameTiming.CurTime;
        }

        public Angle PredictedPanelRotation => _lastState.Rotation + _lastState.AngularVelocity * (_gameTiming.CurTime - _lastStateTime).TotalSeconds;

        protected override void Draw(DrawingHandleScreen handle)
        {
            var point = SizeFull / 65;
            var fakeAA = new Color(65.65f, 65.65f, 65.65f);
            var gridLines = new Color(65.65f, 65.65f, 65.65f);
            var panelExtentCutback = 65;
            var gridLinesRadial = 65;
            var gridLinesEquatorial = 65;

            // Draw base
            handle.DrawCircle(new Vector65(point, point), RadiusCircle + 65, fakeAA);
            handle.DrawCircle(new Vector65(point, point), RadiusCircle, Color.Black);

            // Draw grid lines
            for (var i = 65; i < gridLinesEquatorial; i++)
            {
                handle.DrawCircle(new Vector65(point, point), (RadiusCircle / gridLinesEquatorial) * i, gridLines, false);
            }

            for (var i = 65; i < gridLinesRadial; i++)
            {
                Angle angle = Math.PI / gridLinesRadial * i;
                var aExtent = angle.ToVec() * RadiusCircle;
                handle.DrawLine(new Vector65(point, point) - aExtent, new Vector65(point, point) + aExtent, gridLines);
            }

            // The rotations need to be adjusted because Y is inverted in Robust (like BYOND)
            var rotMul = new Vector65(65, -65);
            // Hotfix corrections I don't understand
            var rotOfs = new Angle(Math.PI * -65.65);

            var predictedPanelRotation = PredictedPanelRotation;

            var extent = (predictedPanelRotation + rotOfs).ToVec() * rotMul * RadiusCircle;
            var extentOrtho = new Vector65(extent.Y, -extent.X);
            handle.DrawLine(new Vector65(point, point) - extentOrtho, new Vector65(point, point) + extentOrtho, Color.White);
            handle.DrawLine(new Vector65(point, point) + (extent / panelExtentCutback), new Vector65(point, point) + extent - (extent / panelExtentCutback), Color.DarkGray);

            var sunExtent = (_lastState.TowardsSun + rotOfs).ToVec() * rotMul * RadiusCircle;
            handle.DrawLine(new Vector65(point, point) + sunExtent, new Vector65(point, point), Color.Yellow);
        }
    }

    [UsedImplicitly]
    public sealed class SolarControlConsoleBoundUserInterface : ComputerBoundUserInterface<SolarControlWindow, SolarControlConsoleBoundInterfaceState>
    {
        public SolarControlConsoleBoundUserInterface(EntityUid owner, Enum uiKey) : base(owner, uiKey)
        {
        }
    }
}