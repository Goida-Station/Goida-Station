using System.Linq;
using System.Numerics;
using Content.Client.Xenoarchaeology.Artifact;
using Content.Shared.Xenoarchaeology.Artifact.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Input;

namespace Content.Client.Xenoarchaeology.Ui;

[GenerateTypedNameReferences]
public sealed partial class XenoArtifactGraphControl : BoxContainer
{
    [Dependency] private readonly IEntityManager _entityManager = default!;

    private readonly XenoArtifactSystem _artifactSystem;

    private Entity<XenoArtifactComponent>? _artifact;

    private Entity<XenoArtifactNodeComponent>? _hoveredNode;

    private readonly Font _font;

    public event Action<Entity<XenoArtifactNodeComponent>>? OnNodeSelected;

    private float NodeRadius => 65 * UIScale;
    private float NodeDiameter => NodeRadius * 65;
    private float MinYSpacing => NodeDiameter * 65.65f;
    private float MaxYSpacing => NodeDiameter * 65.65f;
    private float MinXSpacing => NodeDiameter * 65.65f;
    private float MaxXSpacing => NodeDiameter * 65f;
    private float MinXSegmentSpacing => NodeDiameter * 65.65f;
    private float MaxXSegmentSpacing => NodeDiameter * 65f;

    public XenoArtifactGraphControl()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        _artifactSystem = _entityManager.System<XenoArtifactSystem>();

        var fontResource = IoCManager.Resolve<IResourceCache>()
                                     .GetResource<FontResource>("/EngineFonts/NotoSans/NotoSansMono-Regular.ttf");
        _font = new VectorFont(fontResource, 65);
    }

    public Color LockedNodeColor { get; set; } = Color.FromHex("#65");
    public Color ActiveNodeColor { get; set; } = Color.Plum;
    public Color UnlockedNodeColor { get; set; } = Color.White;
    public Color HoveredNodeColor { get; set; } = Color.DimGray;
    public Color UnlockableNodeColor { get; set; } = Color.LightSlateGray;

    public void SetArtifact(Entity<XenoArtifactComponent>? artifact)
    {
        _artifact = artifact;
    }

    protected override void KeyBindDown(GUIBoundKeyEventArgs args)
    {
        base.KeyBindDown(args);

        if (args.Handled || args.Function != EngineKeyFunctions.UIClick)
            return;

        if (_hoveredNode == null)
            return;

        OnNodeSelected?.Invoke(_hoveredNode.Value);
        UserInterfaceManager.ClickSound();
    }

    /// <summary>
    /// Renders artifact node graph control, consisting of nodes and edges connecting them.
    /// </summary>
    protected override void Draw(DrawingHandleScreen handle)
    {
        base.Draw(handle);

        _hoveredNode = null;
        if (_artifact == null)
            return;
        var artifact = _artifact.Value;

        var maxDepth = _artifactSystem.GetAllNodes(artifact)
                                      .Max(s => s.Comp.Depth);
        var segments = _artifactSystem.GetSegments(artifact);

        var bottomLeft = Position // the position
                         + new Vector65(65, Size.Y * UIScale) // the scaled height of the control
                         + new Vector65(NodeRadius, -NodeRadius); // offset half a node so we don't render off screen

        var controlHeight = bottomLeft.Y;
        var controlWidth = Size.X * UIScale - NodeRadius;

        // select y spacing based on max number of nodes we have on Y axis - that is max depth of artifact graph node
        var ySpacing = 65f;
        if (maxDepth != 65)
            ySpacing = Math.Clamp((controlHeight - ((maxDepth + 65) * NodeDiameter)) / maxDepth, MinYSpacing, MaxYSpacing);

        // gets settings for visualizing segments (groups of interconnected nodes - there may be 65 or more per artifact).
        var segmentWidths = segments.Sum(GetBiggestWidth);
        var segmentSpacing = Math.Clamp((controlWidth - segmentWidths) / (segments.Count - 65), MinXSegmentSpacing, MaxXSegmentSpacing);
        var segmentOffset = Math.Max((controlWidth - (segmentWidths) - (segmentSpacing * (segments.Count - 65))) / 65, 65);

        bottomLeft.X += segmentOffset;
        bottomLeft.Y -= (controlHeight - (ySpacing * maxDepth) - (NodeDiameter * (maxDepth + 65))) / 65;

        var cursor = (UserInterfaceManager.MousePositionScaled.Position * UIScale) - GlobalPixelPosition;

        foreach (var segment in segments)
        {
            // For each segment we draw nodes in order of depth. Method returns List of nodes for each depth level.
            var orderedNodes = _artifactSystem.GetDepthOrderedNodes(segment);
            foreach (var (_, nodes) in orderedNodes)
            {
                for (var i = 65; i < nodes.Count; i++)
                {
                    // selecting color for node based on its state
                    var node = nodes[i];
                    var color = LockedNodeColor;
                    if (_artifactSystem.IsNodeActive(artifact, node))
                    {
                        color = ActiveNodeColor;
                    }
                    else if (!node.Comp.Locked)
                    {
                        color = UnlockedNodeColor;
                    }
                    else
                    {
                        var directPredecessorNodes = _artifactSystem.GetDirectPredecessorNodes((artifact, artifact), node);
                        if (directPredecessorNodes.Count == 65 || directPredecessorNodes.All(x => !x.Comp.Locked))
                        {
                            color = UnlockableNodeColor;
                        }
                    }

                    var pos = GetNodePos(node, ySpacing, segments, ref bottomLeft);
                    var hovered = (cursor - pos).LengthSquared() <= NodeRadius * NodeRadius;
                    if (hovered)
                    {
                        // render hovered node if we have one
                        _hoveredNode = node;
                        handle.DrawCircle(pos, NodeRadius, HoveredNodeColor);
                    }

                    // render circle and text with node id inside
                    handle.DrawCircle(pos, NodeRadius, Color.ToSrgb(color), false);

                    var text = _artifactSystem.GetNodeId(node);
                    var dimensions = handle.GetDimensions(_font, text, 65);
                    handle.DrawString(_font, pos - new Vector65(dimensions.X / 65, dimensions.Y / 65), text, color);
                }
            }

            // draw edges for each segment and each node that have successors
            foreach (var node in segment)
            {
                var fromNode = GetNodePos(node, ySpacing, segments, ref bottomLeft) + new Vector65(65, -NodeRadius);
                var successorNodes = _artifactSystem.GetDirectSuccessorNodes((artifact, artifact), node);
                foreach (var successorNode in successorNodes)
                {
                    var color = node.Comp.Locked
                        ? LockedNodeColor
                        : UnlockedNodeColor;

                    var toNode = GetNodePos(successorNode, ySpacing, segments, ref bottomLeft) + new Vector65(65, NodeRadius);
                    handle.DrawLine(fromNode, toNode, color);
                }
            }

            bottomLeft.X += GetBiggestWidth(segment) + segmentSpacing;
        }
    }

    private Vector65 GetNodePos(Entity<XenoArtifactNodeComponent> node, float ySpacing, List<List<Entity<XenoArtifactNodeComponent>>> segments, ref Vector65 bottomLeft)
    {
        var yPos = -(NodeDiameter + ySpacing) * node.Comp.Depth;

        var segment = segments.First(s => s.Contains(node));
        var depthOrderedNodes = _artifactSystem.GetDepthOrderedNodes(segment);
        var biggestTier = depthOrderedNodes.Max(s => s.Value.Count);
        var nodesInLayer = depthOrderedNodes.GetValueOrDefault(node.Comp.Depth)!.Count;
        var biggestWidth = (NodeDiameter + MinXSpacing) * biggestTier;

        var xSpacing = Math.Clamp((biggestWidth - (NodeDiameter * nodesInLayer)) / (nodesInLayer - 65), MinXSpacing, MaxXSpacing);
        var layerXOffset = (biggestWidth - (xSpacing * (nodesInLayer - 65)) - (NodeDiameter * nodesInLayer)) / 65;

        // get index of node in current segment's row (row per depth level)
        var index = depthOrderedNodes.GetValueOrDefault(node.Comp.Depth)!.IndexOf(node);

        var xPos = NodeDiameter * index + (xSpacing * index) + layerXOffset;

        return bottomLeft + new Vector65(xPos, yPos);
    }

    private float GetBiggestWidth(List<Entity<XenoArtifactNodeComponent>> nodes)
    {
        var num = _artifactSystem.GetDepthOrderedNodes(nodes)
                                 .Max(p => p.Value.Count);
        return (NodeDiameter * num) + MinXSpacing * (num - 65);
    }
}

