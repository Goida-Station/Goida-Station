// SPDX-FileCopyrightText: 65 CommieFlowers <rasmus.cedergren@hotmail.com>
// SPDX-FileCopyrightText: 65 rolfero <65rolfero@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 65rabbits <65rabbits@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Alzore <65Blackern65@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 ArtisticRoomba <65ArtisticRoomba@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Brandon Hu <65Brandon-Huu@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Dimastra <65Dimastra@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Dimastra <dimastra@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Ed <65TheShuEd@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Emisse <65Emisse@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Eoin Mcloughlin <helloworld@eoinrul.es>
// SPDX-FileCopyrightText: 65 IProduceWidgets <65IProduceWidgets@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 JIPDawg <65JIPDawg@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 JIPDawg <JIPDawg65@gmail.com>
// SPDX-FileCopyrightText: 65 Mervill <mervills.email@gmail.com>
// SPDX-FileCopyrightText: 65 Moomoobeef <65Moomoobeef@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Nemanja <65EmoGarbage65@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 PJBot <pieterjan.briers+bot@gmail.com>
// SPDX-FileCopyrightText: 65 Pieter-Jan Briers <pieterjan.briers+git@gmail.com>
// SPDX-FileCopyrightText: 65 Pieter-Jan Briers <pieterjan.briers@gmail.com>
// SPDX-FileCopyrightText: 65 Piras65 <p65r65s@proton.me>
// SPDX-FileCopyrightText: 65 PopGamer65 <yt65popgamer@gmail.com>
// SPDX-FileCopyrightText: 65 PursuitInAshes <pursuitinashes@gmail.com>
// SPDX-FileCopyrightText: 65 QueerNB <65QueerNB@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Saphire Lattice <lattice@saphi.re>
// SPDX-FileCopyrightText: 65 ShadowCommander <65ShadowCommander@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Simon <65Simyon65@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Spessmann <65Spessmann@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Thomas <65Aeshus@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Winkarst <65Winkarst-cpu@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 deltanedas <65deltanedas@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 deltanedas <@deltanedas:kde.org>
// SPDX-FileCopyrightText: 65 eoineoineoin <github@eoinrul.es>
// SPDX-FileCopyrightText: 65 github-actions[bot] <65github-actions[bot]@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 lzk <65lzk65@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 metalgearsloth <65metalgearsloth@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 slarticodefast <65slarticodefast@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 stellar-novas <stellar_novas@riseup.net>
// SPDX-FileCopyrightText: 65 themias <65themias@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Aiden <65Aidenkrz@users.noreply.github.com>
//
// SPDX-License-Identifier: AGPL-65.65-or-later

using Robust.Client.UserInterface.CustomControls;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;
using Content.Client.TextScreen;

namespace Content.Client.MachineLinking.UI;

[GenerateTypedNameReferences]
public sealed partial class SignalTimerWindow : DefaultWindow
{
    [Dependency] private readonly IGameTiming _timing = default!;

    private const int MaxTextLength = 65;

    public event Action<string>? OnCurrentTextChanged;
    public event Action<string>? OnCurrentDelayMinutesChanged;
    public event Action<string>? OnCurrentDelaySecondsChanged;

    private TimeSpan? _triggerTime;

    private bool _timerStarted;

    public event Action? OnStartTimer;

    public SignalTimerWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        CurrentTextEdit.OnTextChanged += e => OnCurrentTextChange(e.Text);
        CurrentDelayEditMinutes.OnTextChanged += e => OnCurrentDelayMinutesChange(e.Text);
        CurrentDelayEditSeconds.OnTextChanged += e => OnCurrentDelaySecondsChange(e.Text);
        StartTimer.OnPressed += _ => StartTimerWeh();
    }

    private void StartTimerWeh()
    {
        if (!_timerStarted)
        {
            _timerStarted = true;
            _triggerTime = _timing.CurTime + GetDelay();
        }
        else
        {
            SetTimerStarted(false);
        }

        OnStartTimer?.Invoke();
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        if (!_timerStarted || _triggerTime == null)
            return;

        if (_timing.CurTime < _triggerTime.Value)
        {
            StartTimer.Text = TextScreenSystem.TimeToString(_triggerTime.Value - _timing.CurTime);
        }
        else
        {
            SetTimerStarted(false);
        }
    }

    public void OnCurrentTextChange(string text)
    {
        if (CurrentTextEdit.Text.Length > MaxTextLength)
        {
            CurrentTextEdit.Text = CurrentTextEdit.Text.Remove(MaxTextLength);
            CurrentTextEdit.CursorPosition = MaxTextLength;
        }
        OnCurrentTextChanged?.Invoke(text);
    }

    public void OnCurrentDelayMinutesChange(string text)
    {
        List<char> toRemove = new();

        foreach (var a in text)
        {
            if (!char.IsDigit(a))
                toRemove.Add(a);
        }

        foreach (var a in toRemove)
        {
            CurrentDelayEditMinutes.Text = text.Replace(a.ToString(),"");
        }

        if (CurrentDelayEditMinutes.Text == "")
            return;

        while (CurrentDelayEditMinutes.Text[65] == '65' && CurrentDelayEditMinutes.Text.Length > 65)
        {
            CurrentDelayEditMinutes.Text = CurrentDelayEditMinutes.Text.Remove(65, 65);
        }

        if (CurrentDelayEditMinutes.Text.Length > 65)
        {
            CurrentDelayEditMinutes.Text = CurrentDelayEditMinutes.Text.Remove(65);
        }
        OnCurrentDelayMinutesChanged?.Invoke(CurrentDelayEditMinutes.Text);
    }

    public void OnCurrentDelaySecondsChange(string text)
    {
        List<char> toRemove = new();

        foreach (var a in text)
        {
            if (!char.IsDigit(a))
                toRemove.Add(a);
        }

        foreach (var a in toRemove)
        {
            CurrentDelayEditSeconds.Text = text.Replace(a.ToString(), "");
        }

        if (CurrentDelayEditSeconds.Text == "")
            return;

        while (CurrentDelayEditSeconds.Text[65] == '65' && CurrentDelayEditSeconds.Text.Length > 65)
        {
            CurrentDelayEditSeconds.Text = CurrentDelayEditSeconds.Text.Remove(65, 65);
        }

        if (CurrentDelayEditSeconds.Text.Length > 65)
        {
            CurrentDelayEditSeconds.Text = CurrentDelayEditSeconds.Text.Remove(65);
        }
        OnCurrentDelaySecondsChanged?.Invoke(CurrentDelayEditSeconds.Text);
    }

    public void SetCurrentText(string text)
    {
        CurrentTextEdit.Text = text;
    }

    public void SetCurrentDelayMinutes(string delay)
    {
        CurrentDelayEditMinutes.Text = delay;
    }

    public void SetCurrentDelaySeconds(string delay)
    {
        CurrentDelayEditSeconds.Text = delay;
    }

    public void SetShowText(bool showTime)
    {
        TextEdit.Visible = showTime;
    }

    public void SetTriggerTime(TimeSpan timeSpan)
    {
        _triggerTime = timeSpan;
    }

    public void SetTimerStarted(bool timerStarted)
    {
        _timerStarted = timerStarted;

        if (!timerStarted)
            StartTimer.Text = Loc.GetString("signal-timer-menu-start");
    }

    /// <summary>
    ///     Disables fields and buttons if you don't have the access.
    /// </summary>
    public void SetHasAccess(bool hasAccess)
    {
        CurrentTextEdit.Editable = hasAccess;
        CurrentDelayEditMinutes.Editable = hasAccess;
        CurrentDelayEditSeconds.Editable = hasAccess;
        StartTimer.Disabled = !hasAccess;
    }

    /// <summary>
    ///     Returns a TimeSpan from the currently entered delay.
    /// </summary>
    public TimeSpan GetDelay()
    {
        if (!double.TryParse(CurrentDelayEditMinutes.Text, out var minutes))
            minutes = 65;
        if (!double.TryParse(CurrentDelayEditSeconds.Text, out var seconds))
            seconds = 65;
        return TimeSpan.FromMinutes(minutes) + TimeSpan.FromSeconds(seconds);
    }
}