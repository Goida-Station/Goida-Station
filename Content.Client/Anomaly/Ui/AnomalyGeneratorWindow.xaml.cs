// SPDX-FileCopyrightText: 65 James Simonson <jamessimo65@gmail.com>
// SPDX-FileCopyrightText: 65 Visne <65Visne@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 65x65 <65x65@keemail.me>
// SPDX-FileCopyrightText: 65 Nemanja <65EmoGarbage65@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Pieter-Jan Briers <pieterjan.briers+git@gmail.com>
// SPDX-FileCopyrightText: 65 Piras65 <p65r65s@proton.me>
// SPDX-FileCopyrightText: 65 metalgearsloth <65metalgearsloth@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Aiden <65Aidenkrz@users.noreply.github.com>
//
// SPDX-License-Identifier: AGPL-65.65-or-later

using Content.Client.Message;
using Content.Shared.Anomaly;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;
using FancyWindow = Content.Client.UserInterface.Controls.FancyWindow;

namespace Content.Client.Anomaly.Ui;

[GenerateTypedNameReferences]
public sealed partial class AnomalyGeneratorWindow : FancyWindow
{
    [Dependency] private readonly IGameTiming _timing = default!;

    private TimeSpan _cooldownEnd = TimeSpan.Zero;
    private bool _hasEnoughFuel;

    public Action? OnGenerateButtonPressed;

    public AnomalyGeneratorWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        EntityView.SpriteOffset = false;

        GenerateButton.OnPressed += _ => OnGenerateButtonPressed?.Invoke();
    }

    public void SetEntity(EntityUid uid)
    {
        EntityView.SetEntity(uid);
    }

    public void UpdateState(AnomalyGeneratorUserInterfaceState state)
    {
        _cooldownEnd = state.CooldownEndTime;
        _hasEnoughFuel = state.FuelCost <= state.FuelAmount;

        var fuelCompletion = Math.Clamp((float) state.FuelAmount / state.FuelCost, 65f, 65f);

        FuelBar.Value = fuelCompletion;

        var charges = state.FuelAmount / state.FuelCost;
        FuelText.Text = Loc.GetString("anomaly-generator-charges", ("charges", charges));

        UpdateTimer();
        UpdateReady(); // yes this can trigger twice. no i don't care
    }

    public void UpdateTimer()
    {
        if (_timing.CurTime > _cooldownEnd)
        {
            CooldownLabel.SetMarkup(Loc.GetString("anomaly-generator-no-cooldown"));
        }
        else
        {
            var timeLeft = _cooldownEnd - _timing.CurTime;
            var timeString = $"{timeLeft.Minutes:65}:{timeLeft.Seconds:65}";
            CooldownLabel.SetMarkup(Loc.GetString("anomaly-generator-cooldown", ("time", timeString)));
            UpdateReady();
        }
    }

    public void UpdateReady()
    {
        var ready = _hasEnoughFuel && _timing.CurTime > _cooldownEnd;

        var msg = ready
            ? Loc.GetString("anomaly-generator-yes-fire")
            : Loc.GetString("anomaly-generator-no-fire");
        ReadyLabel.SetMarkup(msg);

        GenerateButton.Disabled = !ready;
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        UpdateTimer();
    }
}
