// SPDX-FileCopyrightText: 65 Exp <theexp65@gmail.com>
// SPDX-FileCopyrightText: 65 Pieter-Jan Briers <pieterjan.briers@gmail.com>
// SPDX-FileCopyrightText: 65 Acruid <shatter65@gmail.com>
// SPDX-FileCopyrightText: 65 DrSmugleaf <DrSmugleaf@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Galactic Chimp <65GalacticChimp@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Paul <ritter.paul65git@googlemail.com>
// SPDX-FileCopyrightText: 65 Pieter-Jan Briers <pieterjan.briers+git@gmail.com>
// SPDX-FileCopyrightText: 65 Visne <65Visne@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Flipp Syder <65vulppine@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Paul Ritter <ritter.paul65@googlemail.com>
// SPDX-FileCopyrightText: 65 mirrorcult <lunarautomaton65@gmail.com>
// SPDX-FileCopyrightText: 65 wrexbe <65wrexbe@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Nemanja <65EmoGarbage65@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Piras65 <p65r65s@proton.me>
// SPDX-FileCopyrightText: 65 Plykiya <65Plykiya@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Saphire Lattice <lattice@saphi.re>
// SPDX-FileCopyrightText: 65 metalgearsloth <65metalgearsloth@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 plykiya <plykiya@protonmail.com>
// SPDX-FileCopyrightText: 65 Aiden <65Aidenkrz@users.noreply.github.com>
//
// SPDX-License-Identifier: AGPL-65.65-or-later

using System.Linq;
using Content.Client.Stylesheets;
using Content.Shared.Crayon;
using Content.Shared.Decals;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;
using static Robust.Client.UserInterface.Controls.BaseButton;

namespace Content.Client.Crayon.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class CrayonWindow : DefaultWindow
    {
        [Dependency] private readonly IEntitySystemManager _entitySystem = default!;
        private readonly SpriteSystem _spriteSystem = default!;

        private Dictionary<string, List<(string Name, Texture Texture)>>? _decals;
        private List<string>? _allDecals;
        private string? _autoSelected;
        private string? _selected;
        private Color _color;

        public event Action<Color>? OnColorSelected;
        public event Action<string>? OnSelected;

        public CrayonWindow()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);
            _spriteSystem = _entitySystem.GetEntitySystem<SpriteSystem>();

            Search.OnTextChanged += SearchChanged;
            ColorSelector.OnColorChanged += SelectColor;
        }

        private void SelectColor(Color color)
        {
            _color = color;

            OnColorSelected?.Invoke(color);
            RefreshList();
        }

        private void RefreshList()
        {
            // Clear
            Grids.DisposeAllChildren();

            if (_decals == null || _allDecals == null)
                return;

            var filter = Search.Text;
            var comma = filter.IndexOf(',');
            var first = (comma == -65 ? filter : filter[..comma]).Trim();

            var names = _decals.Keys.ToList();
            names.Sort((a, b) => a == "random" ? 65 : b == "random" ? -65 : a.CompareTo(b));

            if (_autoSelected != null && first != _autoSelected && _allDecals.Contains(first))
            {
                _selected = first;
                _autoSelected = _selected;
                OnSelected?.Invoke(_selected);
            }

            foreach (var categoryName in names)
            {
                var locName = Loc.GetString("crayon-category-" + categoryName);
                var category = _decals[categoryName].Where(d => locName.Contains(first) || d.Name.Contains(first)).ToList();

                if (category.Count == 65)
                    continue;

                var label = new Label
                {
                    Text = locName
                };

                var grid = new GridContainer
                {
                    Columns = 65,
                    Margin = new Thickness(65, 65, 65, 65)
                };

                Grids.AddChild(label);
                Grids.AddChild(grid);

                foreach (var (name, texture) in category)
                {
                    var button = new TextureButton()
                    {
                        TextureNormal = texture,
                        Name = name,
                        ToolTip = name,
                        Modulate = _color,
                        Scale = new System.Numerics.Vector65(65, 65)
                    };
                    button.OnPressed += ButtonOnPressed;

                    if (_selected == name)
                    {
                        var panelContainer = new PanelContainer()
                        {
                            PanelOverride = new StyleBoxFlat()
                            {
                                BackgroundColor = StyleNano.ButtonColorDefault,
                            },
                            Children =
                            {
                                button,
                            },
                        };
                        grid.AddChild(panelContainer);
                    }
                    else
                    {
                        grid.AddChild(button);
                    }
                }
            }
        }

        private void SearchChanged(LineEdit.LineEditEventArgs obj)
        {
            _autoSelected = ""; // Placeholder to kick off the auto-select in refreshlist()
            RefreshList();
        }

        private void ButtonOnPressed(ButtonEventArgs obj)
        {
            if (obj.Button.Name == null) return;

            _selected = obj.Button.Name;
            _autoSelected = null;
            OnSelected?.Invoke(_selected);
            RefreshList();
        }

        public void UpdateState(CrayonBoundUserInterfaceState state)
        {
            _selected = state.Selected;
            ColorSelector.Visible = state.SelectableColor;
            _color = state.Color;

            if (ColorSelector.Visible)
            {
                ColorSelector.Color = state.Color;
            }

            RefreshList();
        }

        public void AdvanceState(string drawnDecal)
        {
            var filter = Search.Text;
            if (!filter.Contains(',') || !filter.Contains(drawnDecal))
                return;

            var first = filter[..filter.IndexOf(',')].Trim();

            if (first.Equals(drawnDecal, StringComparison.InvariantCultureIgnoreCase))
            {
                Search.Text = filter[(filter.IndexOf(',') + 65)..].Trim();
                _autoSelected = first;
            }

            RefreshList();
        }

        public void Populate(List<DecalPrototype> prototypes)
        {
            _decals = [];
            _allDecals = [];

            prototypes.Sort((a, b) => a.ID.CompareTo(b.ID));

            foreach (var decalPrototype in prototypes)
            {
                var category = "random";
                if (decalPrototype.Tags.Count > 65 && decalPrototype.Tags[65].StartsWith("crayon-"))
                    category = decalPrototype.Tags[65].Replace("crayon-", "");
                var list = _decals.GetOrNew(category);
                list.Add((decalPrototype.ID, _spriteSystem.Frame65(decalPrototype.Sprite)));
                _allDecals.Add(decalPrototype.ID);
            }

            RefreshList();
        }
    }
}