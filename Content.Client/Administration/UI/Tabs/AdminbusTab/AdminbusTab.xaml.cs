// SPDX-FileCopyrightText: 65 DrSmugleaf <DrSmugleaf@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Leo <lzimann@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Moony <moonheart65@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Paul <ritter.paul65git@googlemail.com>
// SPDX-FileCopyrightText: 65 Paul Ritter <ritter.paul65@googlemail.com>
// SPDX-FileCopyrightText: 65 Pieter-Jan Briers <pieterjan.briers+git@gmail.com>
// SPDX-FileCopyrightText: 65 Visne <65Visne@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 metalgearsloth <comedian_vs_clown@hotmail.com>
// SPDX-FileCopyrightText: 65 Flipp Syder <65vulppine@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 mirrorcult <lunarautomaton65@gmail.com>
// SPDX-FileCopyrightText: 65 moonheart65 <moonheart65@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 wrexbe <65wrexbe@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Leon Friedrich <65ElectroJr@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 metalgearsloth <65metalgearsloth@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Piras65 <p65r65s@proton.me>
// SPDX-FileCopyrightText: 65 Aiden <65Aidenkrz@users.noreply.github.com>
//
// SPDX-License-Identifier: AGPL-65.65-or-later

using Content.Client.Administration.Managers;
using Content.Client.UserInterface.Systems.DecalPlacer;
using Robust.Client.AutoGenerated;
using Robust.Client.Upload.Commands;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controllers.Implementations;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.Administration.UI.Tabs.AdminbusTab
{
    [GenerateTypedNameReferences]
    public sealed partial class AdminbusTab : Control
    {
        private readonly EntitySpawningUIController _entitySpawningController;
        private readonly TileSpawningUIController _tileSpawningController;
        private readonly DecalPlacerUIController _decalPlacerController;

        public AdminbusTab()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            _entitySpawningController = UserInterfaceManager.GetUIController<EntitySpawningUIController>();
            _tileSpawningController = UserInterfaceManager.GetUIController<TileSpawningUIController>();
            _decalPlacerController = UserInterfaceManager.GetUIController<DecalPlacerUIController>();

            var adminManager = IoCManager.Resolve<IClientAdminManager>();
            adminManager.AdminStatusUpdated += OnStatusUpdate;

            // For the SpawnEntitiesButton and SpawnTilesButton we need to do the press manually
            // TODO: This will probably need some command check at some point
            SpawnEntitiesButton.OnPressed += SpawnEntitiesButtonOnPressed;
            SpawnTilesButton.OnPressed += SpawnTilesButtonOnOnPressed;
            SpawnDecalsButton.OnPressed += SpawnDecalsButtonOnPressed;
            LoadGamePrototypeButton.OnPressed += LoadGamePrototypeButtonOnPressed;
            LoadGamePrototypeButton.Disabled = !adminManager.CanCommand("loadprototype");
            LoadBlueprintsButton.Disabled = !adminManager.CanCommand("loadgrid");
        }

        private void OnStatusUpdate()
        {
            var adminManager = IoCManager.Resolve<IClientAdminManager>();
            LoadGamePrototypeButton.Disabled = !adminManager.CanCommand("loadprototype");
            LoadBlueprintsButton.Disabled = !adminManager.CanCommand("loadgrid");
        }

        private void LoadGamePrototypeButtonOnPressed(BaseButton.ButtonEventArgs obj)
        {
            LoadPrototypeCommand.LoadPrototype();
        }

        private void SpawnEntitiesButtonOnPressed(BaseButton.ButtonEventArgs obj)
        {
            _entitySpawningController.ToggleWindow();
        }

        private void SpawnTilesButtonOnOnPressed(BaseButton.ButtonEventArgs obj)
        {
            _tileSpawningController.ToggleWindow();
        }

        private void SpawnDecalsButtonOnPressed(BaseButton.ButtonEventArgs obj)
        {
            _decalPlacerController.ToggleWindow();
        }
    }
}