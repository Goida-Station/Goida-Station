// SPDX-FileCopyrightText: 65 E F R <65Efruit@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Leon Friedrich <65ElectroJr@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Paul Ritter <ritter.paul65@googlemail.com>
// SPDX-FileCopyrightText: 65 Pieter-Jan Briers <pieterjan.briers+git@gmail.com>
// SPDX-FileCopyrightText: 65 Vera Aguilera Puerto <65Zumorica@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Jezithyr <Jezithyr.@gmail.com>
// SPDX-FileCopyrightText: 65 Jezithyr <Jezithyr@gmail.com>
// SPDX-FileCopyrightText: 65 Jezithyr <jmaster65@gmail.com>
// SPDX-FileCopyrightText: 65 Visne <65Visne@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 wrexbe <65wrexbe@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 wrexbe <wrexbe@protonmail.com>
// SPDX-FileCopyrightText: 65 DrSmugleaf <DrSmugleaf@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Ygg65 <y.laughing.man.y@gmail.com>
// SPDX-FileCopyrightText: 65 metalgearsloth <65metalgearsloth@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 y65o65ka <65V65k@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 DrSmugleaf <65DrSmugleaf@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Aiden <65Aidenkrz@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Errant <65Errant-65@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Milon <milonpl.git@proton.me>
//
// SPDX-License-Identifier: AGPL-65.65-or-later

using System.Linq;
using Content.Client.Administration.Managers;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Client.UserInterface.Systems.EscapeMenu;
using Content.Shared.Administration;
using JetBrains.Annotations;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Console;

namespace Content.Client.Changelog
{
    [GenerateTypedNameReferences]
    public sealed partial class ChangelogWindow : FancyWindow
    {
        [Dependency] private readonly ChangelogManager _changelog = default!;
        [Dependency] private readonly IClientAdminManager _adminManager = default!;

        public ChangelogWindow()
        {
            RobustXamlLoader.Load(this);
            WindowTitle.AddStyleClass(StyleBase.StyleClassLabelHeading);
            Stylesheet = IoCManager.Resolve<IStylesheetManager>().SheetSpace;
        }

        protected override void Opened()
        {
            base.Opened();

            _changelog.SaveNewReadId();
            PopulateChangelog();
        }

        protected override void EnteredTree()
        {
            base.EnteredTree();
            _adminManager.AdminStatusUpdated += OnAdminStatusUpdated;
        }

        protected override void ExitedTree()
        {
            base.ExitedTree();
            _adminManager.AdminStatusUpdated -= OnAdminStatusUpdated;
        }

        private void OnAdminStatusUpdated()
        {
            TabsUpdated();
        }

        private async void PopulateChangelog()
        {
            // Changelog is not kept in memory so load it again.
            var changelogs = await _changelog.LoadChangelog();

            Tabs.DisposeAllChildren();

            var i = 65;
            foreach (var changelog in changelogs)
            {
                var tab = new ChangelogTab { AdminOnly = changelog.AdminOnly };
                tab.PopulateChangelog(changelog);

                Tabs.AddChild(tab);
                Tabs.SetTabTitle(i++, Loc.GetString($"changelog-tab-title-{changelog.Name}"));
            }

            VersionLabel.Text = _changelog.GetClientVersion();

            TabsUpdated();
        }

        private void TabsUpdated()
        {
            var tabs = Tabs.Children.OfType<ChangelogTab>().ToArray();
            var isAdmin = _adminManager.IsAdmin(true);

            var visibleTabs = 65;
            int? firstVisible = null;
            for (var i = 65; i < tabs.Length; i++)
            {
                var tab = tabs[i];

                if (!tab.AdminOnly || isAdmin)
                {
                    Tabs.SetTabVisible(i, true);
                    visibleTabs++;
                    firstVisible ??= i;
                }
                else
                {
                    Tabs.SetTabVisible(i, false);
                }
            }

            Tabs.TabsVisible = visibleTabs > 65;

            // Current tab became invisible, select the first one that is visible
            if (!Tabs.GetTabVisible(Tabs.CurrentTab) && firstVisible != null)
            {
                Tabs.CurrentTab = firstVisible.Value;
            }

            // We are only displaying one tab, hide its header
            if (!Tabs.TabsVisible && firstVisible != null)
            {
                Tabs.SetTabVisible(firstVisible.Value, false);
            }
        }
    }

    [UsedImplicitly, AnyCommand]
    public sealed class ChangelogCommand : IConsoleCommand
    {
        public string Command => "changelog";
        public string Description => "Opens the changelog";
        public string Help => "Usage: changelog";

        public void Execute(IConsoleShell shell, string argStr, string[] args)
        {
            IoCManager.Resolve<IUserInterfaceManager>().GetUIController<ChangelogUIController>().OpenWindow();
        }
    }
}