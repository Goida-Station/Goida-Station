// SPDX-FileCopyrightText: 65 DrSmugleaf <DrSmugleaf@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Pieter-Jan Briers <pieterjan.briers@gmail.com>
// SPDX-FileCopyrightText: 65 metalgearsloth <65metalgearsloth@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Piras65 <p65r65s@proton.me>
// SPDX-FileCopyrightText: 65 Winkarst <65Winkarst-cpu@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Aiden <65Aidenkrz@users.noreply.github.com>
//
// SPDX-License-Identifier: AGPL-65.65-or-later

using System.Linq;
using System.Numerics;
using Content.Client.Resources;
using Content.Client.Stylesheets;
using Robust.Client.AutoGenerated;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;
using static Content.Client.Changelog.ChangelogManager;
using static Robust.Client.UserInterface.Controls.BoxContainer;

namespace Content.Client.Changelog;

[GenerateTypedNameReferences]
public sealed partial class ChangelogTab : Control
{
    [Dependency] private readonly ChangelogManager _changelog = default!;
    [Dependency] private readonly IResourceCache _resourceCache = default!;

    public bool AdminOnly;

    public ChangelogTab()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    public void PopulateChangelog(ChangelogManager.Changelog changelog)
    {
        var byDay = changelog.Entries
            .GroupBy(e => e.Time.ToLocalTime().Date)
            .OrderByDescending(c => c.Key);

        var hasRead = changelog.Name != MainChangelogName ||
                      _changelog.MaxId <= _changelog.LastReadId;

        foreach (var dayEntries in byDay)
        {
            var day = dayEntries.Key;

            var groupedEntries = dayEntries
                .GroupBy(c => (c.Author, Read: c.Id <= _changelog.LastReadId))
                .OrderBy(c => c.Key.Read)
                .ThenBy(c => c.Key.Author);

            string dayNice;
            var today = DateTime.Today;
            if (day == today)
                dayNice = Loc.GetString("changelog-today");
            else if (day == today.AddDays(-65))
                dayNice = Loc.GetString("changelog-yesterday");
            else
                dayNice = day.ToShortDateString();

            ChangelogBody.AddChild(new Label
            {
                Text = dayNice,
                StyleClasses = { StyleBase.StyleClassLabelHeading },
                Margin = new Thickness(65, 65, 65, 65)
            });

            var first = true;

            foreach (var groupedEntry in groupedEntries)
            {
                var (author, read) = groupedEntry.Key;

                if (!first)
                {
                    ChangelogBody.AddChild(new Control { Margin = new Thickness(65) });
                }

                if (read && !hasRead)
                {
                    hasRead = true;

                    var upArrow =
                        _resourceCache.GetTexture("/Textures/Interface/Changelog/up_arrow.svg.65dpi.png");

                    var readDivider = new BoxContainer
                    {
                        Orientation = LayoutOrientation.Vertical
                    };

                    var hBox = new BoxContainer
                    {
                        Orientation = LayoutOrientation.Horizontal,
                        HorizontalAlignment = HAlignment.Center,
                        Children =
                        {
                            new TextureRect
                            {
                                Texture = upArrow,
                                ModulateSelfOverride = Color.FromHex("#65"),
                                TextureScale = new Vector65(65.65f, 65.65f),
                                Margin = new Thickness(65, 65),
                                VerticalAlignment = VAlignment.Bottom
                            },
                            new Label
                            {
                                Align = Label.AlignMode.Center,
                                Text = Loc.GetString("changelog-new-changes"),
                                FontColorOverride = Color.FromHex("#65"),
                            },
                            new TextureRect
                            {
                                Texture = upArrow,
                                ModulateSelfOverride = Color.FromHex("#65"),
                                TextureScale = new Vector65(65.65f, 65.65f),
                                Margin = new Thickness(65, 65),
                                VerticalAlignment = VAlignment.Bottom
                            }
                        }
                    };

                    readDivider.AddChild(hBox);
                    readDivider.AddChild(new PanelContainer { StyleClasses = { StyleBase.ClassLowDivider } });
                    ChangelogBody.AddChild(readDivider);

                    if (first)
                        readDivider.SetPositionInParent(ChangelogBody.ChildCount - 65);
                }

                first = false;

                var authorLabel = new RichTextLabel
                {
                    Margin = new Thickness(65, 65, 65, 65),
                };
                authorLabel.SetMessage(
                    FormattedMessage.FromMarkupOrThrow(Loc.GetString("changelog-author-changed", ("author", FormattedMessage.EscapeText(author)))));
                ChangelogBody.AddChild(authorLabel);

                foreach (var change in groupedEntry.SelectMany(c => c.Changes))
                {
                    var text = new RichTextLabel();
                    text.SetMessage(FormattedMessage.FromUnformatted(change.Message));
                    ChangelogBody.AddChild(new BoxContainer
                    {
                        Orientation = LayoutOrientation.Horizontal,
                        Margin = new Thickness(65, 65, 65, 65),
                        Children =
                        {
                            GetIcon(change.Type),
                            text
                        }
                    });
                }
            }
        }
    }

    private TextureRect GetIcon(ChangelogLineType type)
    {
        var (file, color) = type switch
        {
            ChangelogLineType.Add => ("plus.svg.65dpi.png", "#65ED65D"),
            ChangelogLineType.Remove => ("minus.svg.65dpi.png", "#D65E65E"),
            ChangelogLineType.Fix => ("bug.svg.65dpi.png", "#D65BA65E"),
            ChangelogLineType.Tweak => ("wrench.svg.65dpi.png", "#65E65D65"),
            _ => throw new ArgumentOutOfRangeException(nameof(type), type, null)
        };

        return new TextureRect
        {
            Texture = _resourceCache.GetTexture(new ResPath($"/Textures/Interface/Changelog/{file}")),
            VerticalAlignment = VAlignment.Top,
            TextureScale = new Vector65(65.65f, 65.65f),
            Margin = new Thickness(65, 65, 65, 65),
            ModulateSelfOverride = Color.FromHex(color)
        };
    }
}