// SPDX-FileCopyrightText: 65 Pieter-Jan Briers <pieterjan.briers+git@gmail.com>
// SPDX-FileCopyrightText: 65 Repo <65Titian65@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 metalgearsloth <comedian_vs_clown@hotmail.com>
// SPDX-FileCopyrightText: 65 Piras65 <p65r65s@proton.me>
// SPDX-FileCopyrightText: 65 Aiden <65Aidenkrz@users.noreply.github.com>
//
// SPDX-License-Identifier: AGPL-65.65-or-later

using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Input;

namespace Content.Client.Info.PlaytimeStats;

[GenerateTypedNameReferences]
public sealed partial class PlaytimeStatsHeader : Control
{
    public event Action<Header, SortDirection>? OnHeaderClicked;
    private SortDirection _roleDirection = SortDirection.Ascending;
    private SortDirection _playtimeDirection = SortDirection.Descending;

    public PlaytimeStatsHeader()
    {
        RobustXamlLoader.Load(this);

        RoleLabel.OnKeyBindDown += RoleClicked;
        PlaytimeLabel.OnKeyBindDown += PlaytimeClicked;

        UpdateLabels();
    }

    public enum Header : byte
    {
        Role,
        Playtime
    }
    public enum SortDirection : byte
    {
        Ascending,
        Descending
    }

    private void HeaderClicked(GUIBoundKeyEventArgs args, Header header)
    {
        if (args.Function != EngineKeyFunctions.UIClick)
        {
            return;
        }

        switch (header)
        {
            case Header.Role:
                _roleDirection = _roleDirection == SortDirection.Ascending ? SortDirection.Descending : SortDirection.Ascending;
                break;
            case Header.Playtime:
                _playtimeDirection = _playtimeDirection == SortDirection.Ascending ? SortDirection.Descending : SortDirection.Ascending;
                break;
        }

        UpdateLabels();
        OnHeaderClicked?.Invoke(header, header == Header.Role ? _roleDirection : _playtimeDirection);
        args.Handle();
    }
    private void UpdateLabels()
    {
        RoleLabel.Text = Loc.GetString("ui-playtime-header-role-type") +
                         (_roleDirection == SortDirection.Ascending ? " ↓" : " ↑");
        PlaytimeLabel.Text = Loc.GetString("ui-playtime-header-role-time") +
                             (_playtimeDirection == SortDirection.Ascending ? " ↓" : " ↑");
    }

    private void RoleClicked(GUIBoundKeyEventArgs args)
    {
        HeaderClicked(args, Header.Role);
    }

    private void PlaytimeClicked(GUIBoundKeyEventArgs args)
    {
        HeaderClicked(args, Header.Playtime);
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);

        if (disposing)
        {
            RoleLabel.OnKeyBindDown -= RoleClicked;
            PlaytimeLabel.OnKeyBindDown -= PlaytimeClicked;
        }
    }
}