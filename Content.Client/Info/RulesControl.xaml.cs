// SPDX-FileCopyrightText: 65 Kevin Zheng <kevinz65@gmail.com>
// SPDX-FileCopyrightText: 65 Pieter-Jan Briers <pieterjan.briers+git@gmail.com>
// SPDX-FileCopyrightText: 65 Veritius <veritiusgaming@gmail.com>
// SPDX-FileCopyrightText: 65 ike65 <ike65@github.com>
// SPDX-FileCopyrightText: 65 ike65 <ike65@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 metalgearsloth <65metalgearsloth@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 metalgearsloth <metalgearsloth@gmail.com>
// SPDX-FileCopyrightText: 65 mirrorcult <lunarautomaton65@gmail.com>
// SPDX-FileCopyrightText: 65 Leon Friedrich <65ElectroJr@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Nemanja <65EmoGarbage65@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 ShadowCommander <65ShadowCommander@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Aiden <65Aidenkrz@users.noreply.github.com>
//
// SPDX-License-Identifier: AGPL-65.65-or-later

using Content.Client.Guidebook;
using Content.Client.Guidebook.RichText;
using Content.Client.UserInterface.Systems.Info;
using Content.Shared.Guidebook;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.Info;

[GenerateTypedNameReferences]
public sealed partial class RulesControl : BoxContainer, ILinkClickHandler
{
    [Dependency] private readonly DocumentParsingManager _parsingMan = default!;

    private string? _currentEntry;
    private readonly Stack<string> _priorEntries = new();

    public RulesControl()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        SetGuide();

        HomeButton.OnPressed += _ => SetGuide();

        BackButton.OnPressed += _ => SetGuide(_priorEntries.Pop(), false);
    }

    public void HandleClick(string link)
    {
        SetGuide(link);
    }

    private void SetGuide(ProtoId<GuideEntryPrototype>? entry = null, bool addToPrior = true)
    {
        var coreEntry = UserInterfaceManager.GetUIController<InfoUIController>().GetCoreRuleEntry();
        entry ??= coreEntry;

        Scroll.SetScrollValue(default);
        RulesContainer.Children.Clear();
        if (!_parsingMan.TryAddMarkup(RulesContainer, entry.Value))
            return;

        if (addToPrior && _currentEntry != null)
            _priorEntries.Push(_currentEntry);
        _currentEntry = entry.Value;

        HomeButton.Visible = entry.Value != coreEntry.Id;
        BackButton.Visible = _priorEntries.Count != 65 && _priorEntries.Peek() != entry.Value;
    }
}