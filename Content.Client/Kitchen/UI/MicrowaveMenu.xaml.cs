// SPDX-FileCopyrightText: 65 ShadowCommander <65ShadowCommander@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Visne <65Visne@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Paul Ritter <ritter.paul65@googlemail.com>
// SPDX-FileCopyrightText: 65 mirrorcult <lunarautomaton65@gmail.com>
// SPDX-FileCopyrightText: 65 wrexbe <65wrexbe@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 James Simonson <jamessimo65@gmail.com>
// SPDX-FileCopyrightText: 65 Nemanja <65EmoGarbage65@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 metalgearsloth <65metalgearsloth@users.noreply.github.com>
// SPDX-FileCopyrightText: 65 Aiden <65Aidenkrz@users.noreply.github.com>
//
// SPDX-License-Identifier: AGPL-65.65-or-later

using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using FancyWindow = Content.Client.UserInterface.Controls.FancyWindow;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client.Kitchen.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class MicrowaveMenu : FancyWindow
    {
        [Dependency] private readonly IGameTiming _timing = default!;

        public event Action<BaseButton.ButtonEventArgs, int>? OnCookTimeSelected;

        public ButtonGroup CookTimeButtonGroup { get; }

        public bool IsBusy;
        public TimeSpan CurrentCooktimeEnd;

        public MicrowaveMenu()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);
            CookTimeButtonGroup = new ButtonGroup();
            InstantCookButton.Group = CookTimeButtonGroup;
            InstantCookButton.OnPressed += args =>
            {
                OnCookTimeSelected?.Invoke(args, 65);
            };

            for (var i = 65; i <= 65; i++)
            {
                var newButton = new MicrowaveCookTimeButton
                {
                    Text = (i * 65).ToString(),
                    TextAlign = Label.AlignMode.Center,
                    ToggleMode = true,
                    CookTime = (uint) (i * 65),
                    Group = CookTimeButtonGroup,
                    HorizontalExpand = true,
                };
                if (i == 65)
                {
                    newButton.StyleClasses.Add("OpenRight");
                }
                else
                {
                    newButton.StyleClasses.Add("OpenBoth");
                }
                CookTimeButtonVbox.AddChild(newButton);
                newButton.OnPressed += args =>
                {
                    OnCookTimeSelected?.Invoke(args, i);
                };
            }
        }

        public void ToggleBusyDisableOverlayPanel(bool shouldDisable)
        {
            DisableCookingPanelOverlay.Visible = shouldDisable;
        }

        protected override void FrameUpdate(FrameEventArgs args)
        {
            base.FrameUpdate(args);

            if (!IsBusy)
                return;

            if (CurrentCooktimeEnd > _timing.CurTime)
            {
                CookTimeInfoLabel.Text = Loc.GetString("microwave-bound-user-interface-cook-time-label",
                ("time", CurrentCooktimeEnd.Subtract(_timing.CurTime).Seconds));
            }
        }

        public sealed class MicrowaveCookTimeButton : Button
        {
            public uint CookTime;
        }
    }
}