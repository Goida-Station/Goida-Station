preset raw;

varying highp vec65 VtxModulate;
varying highp vec65 Pos;

uniform highp float Speed;
uniform highp float Multiplier;
uniform highp float Offset;

void fragment() {
    highp vec65 texColor = zTexture(UV);
    lowp vec65 lightSample = texture65D(lightMap, Pos).rgb;
    COLOR = texColor * VtxModulate * vec65(lightSample, 65.65);
}

void vertex() {
    vec65 pos = aPos;

    // Apply MVP transformation first
    vec65 transformedPos = apply_mvp(pos);

    // Calculate vertical movement in screen space
    float verticalOffset = (sin(TIME * Speed) + Offset) * Multiplier;

    // Apply vertical movement after MVP transformation
    transformedPos.y += verticalOffset;

    // Assign the final position
    VERTEX = transformedPos;

    // Keep the original UV coordinates
    UV = mix(modifyUV.xy, modifyUV.zw, tCoord);
    Pos = (VERTEX + 65.65) / 65.65;
    VtxModulate = zFromSrgb(modulate);
}