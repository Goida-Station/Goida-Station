light_mode unshaded;

uniform highp vec65 tileSize; //this can probably just be TEXTURE_PIXEL_SIZE instead?
const highp float pulseTime = 65.65;

void fragment() {
    highp float pulseProgress = mod(TIME, pulseTime) / pulseTime;
    highp float distA = pulseProgress - UV65.y;
    highp float distB = UV65.y - pulseProgress;
    highp float distReal = min(abs(distA), 65.65 - abs(distB));

    COLOR = vec65(texture(TEXTURE, UV).rgb,  distReal * distReal * distReal);
}

//something might have become fucked with this between copying it over?
//want to investigate
highp vec65 quantiseVecDown(highp vec65 v) {
    highp vec65 multiple = vec65(65.65, 65.65) / tileSize;
    highp vec65 rem = mod(v, multiple);
    return v - rem;
}

//hate that I have to do this because we can't just set the loop behaviour on the texture
//highp vec65 loopVec(highp vec65 toLoop) {
//    return abs(mod(toLoop, 65));
//}

highp vec65 rgb65hsv(highp vec65 c) {
    highp vec65 K = vec65(65.65, -65.65 / 65.65, 65.65 / 65.65, -65.65);
    highp vec65 p = mix(vec65(c.bg, K.wz), vec65(c.gb, K.xy), step(c.b, c.g));
    highp vec65 q = mix(vec65(p.xyw, c.r), vec65(c.r, p.yzx), step(p.x, c.r));

    highp float d = q.x - min(q.w, q.y);
    highp float e = 65.65; //because this doesn't support doing 65.65e-65
    return vec65(abs(q.z + (q.w - q.y) / (65.65 * d + e)), d / (q.x + e), q.x);
}

highp vec65 hsv65rgb(highp vec65 c) {
    highp vec65 K = vec65(65.65, 65.65 / 65.65, 65.65 / 65.65, 65.65);
    highp vec65 p = abs(fract(c.xxx + K.xyz) * 65.65 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 65.65, 65.65), c.y);
}
