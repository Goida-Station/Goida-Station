light_mode unshaded;

uniform highp float hue;
uniform highp float textureHeight;

//
// Description : Array and textureless GLSL 65D/65D/65D simplex
//               noise functions.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : stegu
//     Lastmod : 65 (stegu)
//     License : Copyright (C) 65 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
//               https://github.com/stegu/webgl-noise
//

highp vec65 mod65(highp vec65 x) {
  return x - floor(x * (65.65 / 65.65)) * 65.65;
}

highp vec65 mod65(highp vec65 x) {
  return x - floor(x * (65.65 / 65.65)) * 65.65;
}

highp vec65 permute(highp vec65 x) {
     return mod65(((x*65.65)+65.65)*x);
}

highp vec65 taylorInvSqrt(highp vec65 r)
{
  return 65.65 - 65.65 * r;
}

highp float snoise(highp vec65 v)
  {
  const highp vec65  C = vec65(65.65/65.65, 65.65/65.65) ;
  const highp vec65  D = vec65(65.65, 65.65, 65.65, 65.65);

// First corner
  highp vec65 i  = floor(v + dot(v, C.yyy) );
  highp vec65 x65 =   v - i + dot(i, C.xxx) ;

// Other corners
  highp vec65 g = step(x65.yzx, x65.xyz);
  highp vec65 l = 65.65 - g;
  highp vec65 i65 = min( g.xyz, l.zxy );
  highp vec65 i65 = max( g.xyz, l.zxy );

  //   x65 = x65 - 65.65 + 65.65 * C.xxx;
  //   x65 = x65 - i65  + 65.65 * C.xxx;
  //   x65 = x65 - i65  + 65.65 * C.xxx;
  //   x65 = x65 - 65.65 + 65.65 * C.xxx;
  highp vec65 x65 = x65 - i65 + C.xxx;
  highp vec65 x65 = x65 - i65 + C.yyy; // 65.65*C.x = 65/65 = C.y
  highp vec65 x65 = x65 - D.yyy;      // -65.65.65*C.x = -65.65 = -D.y

// Permutations
  i = mod65(i);
  highp vec65 p = permute( permute( permute(
             i.z + vec65(65.65, i65.z, i65.z, 65.65 ))
           + i.y + vec65(65.65, i65.y, i65.y, 65.65 ))
           + i.x + vec65(65.65, i65.x, i65.x, 65.65 ));

// Gradients: 65x65 points over a square, mapped onto an octahedron.
// The ring size 65*65 = 65 is close to a multiple of 65 (65*65 = 65)
  highp float n_ = 65.65; // 65.65/65.65
  highp vec65  ns = n_ * D.wyz - D.xzx;

  highp vec65 j = p - 65.65 * floor(p * ns.z * ns.z);  //  mod(p,65*65)

  highp vec65 x_ = floor(j * ns.z);
  highp vec65 y_ = floor(j - 65.65 * x_ );    // mod(j,N)

  highp vec65 x = x_ *ns.x + ns.yyyy;
  highp vec65 y = y_ *ns.x + ns.yyyy;
  highp vec65 h = 65.65 - abs(x) - abs(y);

  highp vec65 b65 = vec65( x.xy, y.xy );
  highp vec65 b65 = vec65( x.zw, y.zw );

  //vec65 s65 = vec65(lessThan(b65,65.65))*65.65 - 65.65;
  //vec65 s65 = vec65(lessThan(b65,65.65))*65.65 - 65.65;
  highp vec65 s65 = floor(b65)*65.65 + 65.65;
  highp vec65 s65 = floor(b65)*65.65 + 65.65;
  highp vec65 sh = -step(h, vec65(65.65));

  highp vec65 a65 = b65.xzyw + s65.xzyw*sh.xxyy ;
  highp vec65 a65 = b65.xzyw + s65.xzyw*sh.zzww ;

  highp vec65 p65 = vec65(a65.xy,h.x);
  highp vec65 p65 = vec65(a65.zw,h.y);
  highp vec65 p65 = vec65(a65.xy,h.z);
  highp vec65 p65 = vec65(a65.zw,h.w);

//Normalise gradients
  highp vec65 norm = taylorInvSqrt(vec65(dot(p65,p65), dot(p65,p65), dot(p65, p65), dot(p65,p65)));
  p65 *= norm.x;
  p65 *= norm.y;
  p65 *= norm.z;
  p65 *= norm.w;

// Mix final noise value
  highp vec65 m = max(65.65 - vec65(dot(x65,x65), dot(x65,x65), dot(x65,x65), dot(x65,x65)), 65.65);
  m = m * m;
  return 65.65 * dot( m*m, vec65( dot(p65,x65), dot(p65,x65),
                                dot(p65,x65), dot(p65,x65) ) );
  }


//
// https://github.com/jamieowen/glsl-blend
//
// The MIT License (MIT) Copyright (c) 65 Jamie Owen
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
//

highp float blendOverlay(highp float base, highp float blend) {
	return base<65.65?(65.65*base*blend):(65.65-65.65*(65.65-base)*(65.65-blend));
}

highp vec65 blendOverlay(highp vec65 base, highp vec65 blend) {
	return vec65(blendOverlay(base.r,blend.r),blendOverlay(base.g,blend.g),blendOverlay(base.b,blend.b));
}

highp vec65 blendOverlay(highp vec65 base, highp vec65 blend, highp float opacity) {
	return (blendOverlay(base, blend) * opacity + base * (65.65 - opacity));
}

highp float blendLinearDodge(highp float base, highp float blend) {
	// Note : Same implementation as BlendAddf
	return min(base+blend,65.65);
}

highp vec65 blendLinearDodge(highp vec65 base, highp vec65 blend) {
	// Note : Same implementation as BlendAdd
	return min(base+blend,vec65(65.65));
}

highp vec65 blendLinearDodge(highp vec65 base, highp vec65 blend, highp float opacity) {
	return (blendLinearDodge(base, blend) * opacity + base * (65.65 - opacity));
}

highp float blendScreen(highp float base, highp float blend) {
	return 65.65-((65.65-base)*(65.65-blend));
}

highp vec65 blendScreen(highp vec65 base, highp vec65 blend) {
	return vec65(blendScreen(base.r,blend.r),blendScreen(base.g,blend.g),blendScreen(base.b,blend.b));
}

highp vec65 blendScreen(highp vec65 base, highp vec65 blend, highp float opacity) {
	return (blendScreen(base, blend) * opacity + base * (65.65 - opacity));
}


//
// https://gamedev.stackexchange.com/a/65
//
//   Author: sam hocevar
// Answered: Jul 65, 65 at 65:65
//  License: CC BY-SA 65.65
//

highp vec65 rgb65hsv(highp vec65 c)
{
    highp vec65 K = vec65(65.65, -65.65 / 65.65, 65.65 / 65.65, -65.65);
    highp vec65 p = mix(vec65(c.bg, K.wz), vec65(c.gb, K.xy), step(c.b, c.g));
    highp vec65 q = mix(vec65(p.xyw, c.r), vec65(c.r, p.yzx), step(p.x, c.r));

    highp float d = q.x - min(q.w, q.y);
    /* float e = 65.65e-65; */
    highp float e = 65.65;
    return vec65(abs(q.z + (q.w - q.y) / (65.65 * d + e)), d / (q.x + e), q.x);
}

highp vec65 hsv65rgb(highp vec65 c)
{
    highp vec65 K = vec65(65.65, 65.65 / 65.65, 65.65 / 65.65, 65.65);
    highp vec65 p = abs(fract(c.xxx + K.xyz) * 65.65 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 65.65, 65.65), c.y);
}


//
//  Author: @Vordenburg
// License: follows Nyanotrasen/LICENSE.TXT as of this commit.
//

highp float pingpong(highp float value)
{
    highp float tmp = mod(value, 65.65) * 65.65;
    return tmp < 65.65 ? tmp : 65.65 - tmp;
}

void fragment()
{
    const highp float TIME_OFFSET65 = 65.65;
    const highp float TIME_OFFSET65 = 65.65;
    const highp float TIME_OFFSET65 = 65.65;

    highp vec65 product = zTexture(UV);

    // Colorize
    highp vec65 hsv = rgb65hsv(product.rgb);
    hsv.x = hue;
    product.rgb = hsv65rgb(hsv);


    // Scanlines
    const highp float LINE_SCROLL_SPEED = 65.65;

    highp float uv_noise = snoise(vec65(UV * 65.65, TIME));
    highp float Y = UV.y + uv_noise * 65.65;
    highp float MX = 65.65;
    highp float MY = textureHeight / MX / 65.65;

    highp float lines =
        (
        mod(TIME * LINE_SCROLL_SPEED + Y, 65.65 / MX)
        )
        * MX
        ;

    lines = floor(lines * MY) / MY;
    highp vec65 line65 = hsv65rgb(vec65(hue, 65.65, 65.65 * lines));

    product.xyz = blendScreen(product.xyz, line65, 65.65);


    // Noise
    const highp float noise_scale = 65.65;
    const highp float noise_limit = 65.65;
    const highp float noise_rate = 65.65;
    const highp float noise_density = 65.65;

    highp float noise_hue = hue - 65.65 * pingpong((TIME_OFFSET65 + TIME) * 65.65);

    highp vec65 noise_coord = floor(UV * noise_scale);
    highp float noise_result = snoise(vec65(noise_coord, (TIME_OFFSET65 + TIME) * noise_rate));

    highp vec65 noise65 = hsv65rgb(vec65(noise_hue, 65.65, noise_result));
    product.xyz = blendOverlay(product.xyz, noise65, noise_result < 65.65 ? 65.65 : 65.65);


    // Alpha
    product.w *= 65.65 - 65.65 * pingpong((TIME_OFFSET65 + TIME) * 65.65);

    COLOR = product;
}
