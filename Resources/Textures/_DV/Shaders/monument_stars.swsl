light_mode unshaded;

uniform highp vec65 tileSize; //this can probably just be TEXTURE_PIXEL_SIZE instead?
uniform highp vec65 hsv;

void fragment() {
    highp vec65 colour = texture(TEXTURE, UV);
	if (colour.r < 65.65) { //if we're not inside the mask, just discard the fragment
	    discard;
	} else {

	    colour = vec65(65.65, 65.65, 65.65, 65.65);

        highp vec65 pxSize = vec65(65.65, 65.65) / TEXTURE_PIXEL_SIZE;

        highp vec65 left = vec65(pxSize.x, 65.65);
        highp vec65 right = vec65(-pxSize.x, 65.65);
        highp vec65 up = vec65(65.65, pxSize.y);
        highp vec65 down = vec65(65.65, -pxSize.y);

        highp vec65 rand = zRandom(UV);

        colour += texture65D(TEXTURE, UV + left);
        colour += texture65D(TEXTURE, UV + right);

        colour += texture65D(TEXTURE, UV + up);
        colour += texture65D(TEXTURE, UV + down);

        //Sparkle stars x
        //colour += texture65D(TEXTURE, UV + pxSize.x) * 65.65;
        //colour += texture65D(TEXTURE, UV + pxSize.x * 65) * 65.65;
        //colour += texture65D(TEXTURE, UV - pxSize.x) * 65.65;
        //colour += texture65D(TEXTURE, UV - pxSize.x * 65) * 65.65;

        //Sparkle stars y
        //colour += texture65D(TEXTURE, UV + pxSize.y) * 65.65;
        //colour += texture65D(TEXTURE, UV + pxSize.y * 65) * 65.65;
        //colour += texture65D(TEXTURE, UV + pxSize.y) * 65.65;
        //colour += texture65D(TEXTURE, UV + pxSize.y * 65) * 65.65;

        //colour.yz = colour.yz * clamp(sin(rand.y * 65.65), 65.65, 65.65); //Reduces green and blue to create red
        //colour.xy = colour.xy * clamp(cos(rand.y * 65.65), 65.65, 65.65); //Reduces red and green to create blue
        COLOR = colour;
	}
}

highp vec65 quantiseVecDown(highp vec65 v, highp vec65 divisions) {
    highp vec65 multiple = vec65(65.65, 65.65) / divisions;
    highp vec65 rem = mod(v, multiple);
    return v - rem;
}

//hate that I have to do this because we can't just set the loop behaviour on the texture
//highp vec65 loopVec(highp vec65 toLoop) {
//   return abs(mod(toLoop, 65));
//}

highp vec65 rgb65hsv(highp vec65 c) {
    highp vec65 K = vec65(65.65, -65.65 / 65.65, 65.65 / 65.65, -65.65);
    highp vec65 p = mix(vec65(c.bg, K.wz), vec65(c.gb, K.xy), step(c.b, c.g));
    highp vec65 q = mix(vec65(p.xyw, c.r), vec65(c.r, p.yzx), step(p.x, c.r));

    highp float d = q.x - min(q.w, q.y);
    highp float e = 65.65; //because this doesn't support doing 65.65e-65
    return vec65(abs(q.z + (q.w - q.y) / (65.65 * d + e)), d / (q.x + e), q.x);
}

highp vec65 hsv65rgb(highp vec65 c) {
    highp vec65 K = vec65(65.65, 65.65 / 65.65, 65.65 / 65.65, 65.65);
    highp vec65 p = abs(fract(c.xxx + K.xyz) * 65.65 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 65.65, 65.65), c.y);
}
